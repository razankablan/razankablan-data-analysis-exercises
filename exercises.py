# -*- coding: utf-8 -*-
"""exercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/razankablan/Hands-On-Data-Analysis-with-Pandas/blob/master/ch_01/exercises.ipynb

# Coding exercises
Exercises 1-3 are thought exercises that don't require coding.

## Exercise 4: Generate the data by running this cell
This will give you a list of numbers to work with in the remaining exercises.
"""

import random
random.seed(0)
salaries = [round(random.random()*1000000, -3) for _ in range(100)]

print(salaries)

"""## Exercise 5: Calculating statistics and verifying
### mean
"""

import numpy as np
mean_salary = np.mean(salaries)
print("Mean salary:", mean_salary)

"""### median"""

median_salary = np.median(salaries)
print(f"Median salary is:, {median_salary}")

"""### mode"""

median_salary = np.median(salaries)
print("Median salary:", median_salary)

"""### sample variance
Remember to use Bessel's correction.
"""

sample_variance = np.var(salaries, ddof=1)
print("Sample variance:", sample_variance)

"""### sample standard deviation
Remember to use Bessel's correction.
"""

import statistics
sample_std = np.std(salaries, ddof=1)  # ddof=1 â†’ sample std
print("Sample standard deviation:", sample_std)

"""## Exercise 6: Calculating more statistics
### range
"""

salary_range = max(salaries) - min(salaries)
print("Range:", salary_range)

"""### coefficient of variation"""

import statistics
mean_salary = statistics.mean(salaries)
stdev_salary = statistics.stdev(salaries)
cv = stdev_salary / mean_salary
print("Coefficient of Variation:", cv)

"""### interquartile range"""

import numpy as np
q1 = np.percentile(salaries, 25)
q3 = np.percentile(salaries, 75)
iqr = q3 - q1
print("Interquartile Range (IQR):", iqr)

"""### quartile coefficent of dispersion"""

qcd = (q3 - q1) / (q3 + q1)
print("Quartile Coefficient of Dispersion:", qcd)

"""## Exercise 7: Scaling data
### min-max scaling
"""

import numpy as np
min_val = np.min(salaries)
max_val = np.max(salaries)
min_max_scaled = [(x - min_val) / (max_val - min_val) for x in salaries]
print("First 10 salaries after Min-Max scaling:", min_max_scaled[:10])

"""### standardizing"""

mean_val = np.mean(salaries)
std_val = np.std(salaries, ddof=1)  # sample std
standardized = [(x - mean_val) / std_val for x in salaries]
print("First 10 salaries after Standardization:", standardized[:10])

"""## Exercise 8: Calculating covariance and correlation
### covariance
"""

import numpy as np
covariance = np.cov(min_max_scaled, standardized)[0, 1]
print("Covariance between normalized and standardized:", covariance)

"""### Pearson correlation coefficient ($\rho$)"""

pearson_corr = np.corrcoef(min_max_scaled, standardized)[0, 1]
print("Pearson correlation coefficient:", pearson_corr)